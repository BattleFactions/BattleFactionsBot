# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: BattleFactions Bot Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [17.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checking out repository
        uses: actions/checkout@v2
      - run: echo "Check out repository done!"

      - name: Installing Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: echo "Installing Node.js ${{ matrix.node-version }} done!"

      - name: Installing dependencies
        run: npm install
      - run: echo "Installing dependencies done!"

#      - name: Creating and populating .env.test file
#        env:
#          TEST_AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
#          TEST_AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
#          TEST_BF_TABLE: ${{ secrets.TEST_BF_TABLE }}
#        run: |
#          touch src/test/.env.test
#          echo AWS_ACCESS_KEY_ID="$TEST_AWS_ACCESS_KEY_ID" >> src/test/.env.test
#          echo AWS_SECRET_ACCESS_KEY="$TEST_AWS_SECRET_ACCESS_KEY" >> src/test/.env.test
#          echo BF_TABLE="$TEST_BF_TABLE" >> src/test/.env.test
#          echo "ls -a ${{ github.workspace }}"
#          ls -a ${{ github.workspace }}
#      - run: echo "Creating and populating .env.test file done!"

      - name: Creating and populating .env file
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BF_FACTION_DOLPHIN_ROLE_ID: ${{ secrets.BF_FACTION_DOLPHIN_ROLE_ID }}
          BF_FACTION_GENERALS_ROLE_ID: ${{ secrets.BF_FACTION_GENERALS_ROLE_ID }}
          BF_FACTION_WHALE_CLUB_ROLE_ID: ${{ secrets.BF_FACTION_WHALE_CLUB_ROLE_ID }}
          BF_GUILD_ID: ${{ secrets.BF_GUILD_ID }}
          BF_HEADQUARTERS_ROLE_ID: ${{ secrets.BF_HEADQUARTERS_ROLE_ID }}
          BF_HOLDERS_ROLE_ID: ${{ secrets.BF_HOLDERS_ROLE_ID }}
          BF_MOD_ROLE_ID: ${{ secrets.BF_MOD_ROLE_ID }}
          BF_TABLE: ${{ secrets.BF_TABLE }}
          BOT_CLIENT_ID: ${{ secrets.BOT_CLIENT_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          touch .env
          echo AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" >> .env
          echo AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION" >> .env
          echo AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" >> .env
          echo FACTION_DOLPHIN_ROLE_ID="$BF_FACTION_DOLPHIN_ROLE_ID" >> .env
          echo FACTION_GENERALS_ROLE_ID="$BF_FACTION_GENERALS_ROLE_ID" >> .env
          echo FACTION_WHALE_CLUB_ROLE_ID="$BF_FACTION_WHALE_CLUB_ROLE_ID" >> .env
          echo GUILD_ID="$BF_GUILD_ID" >> .env
          echo HEADQUARTERS_ROLE_ID="$BF_HEADQUARTERS_ROLE_ID" >> .env
          echo HOLDERS_ROLE_ID="$BF_HOLDERS_ROLE_ID" >> .env
          echo MOD_ROLE_ID="$BF_MOD_ROLE_ID" >> .env
          echo BF_TABLE="$BF_TABLE" >> .env
          echo CLIENT_ID="$BOT_CLIENT_ID" >> .env
          echo TOKEN="$BOT_TOKEN" >> .env
      - run: echo "Creating and populating .env file done!"

      - name: Compiling the code
        run: npm run compile --if-present
      - run: echo "Compiling the code done!"

#      - name: Testing the code
#        env:
#          CI: true
#        run: npm run test:ci --if-present
#      - run: echo "Testing the code done!"

      - name: Deploying the code
        env:
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_PORT: ${{ secrets.FTP_PORT }}
        run: npm run deploy --if-present
      - run: echo "Deploying the code done!"

      - name: This job's status is ${{ job.status }}.
        run: echo "The job is done!"
